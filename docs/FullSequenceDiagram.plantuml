'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Full Sequence Diagram for the Parade Game                             '
'-----------------------------------------------------------------------'
' NOTE: To view the sequence diagram, follow these steps:               '
' 1. Install the an extension on VS Code called PlantUML by jebbs       '
' 2. Right click on this file and click on "Preview Current Diagram"    '
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Setting constants for colour schemes
!define ACTOR_BG #ffffff
!define ACTOR_COLOR #888888
!define PARTICIPANT_BG #E6CEFF
!define ARROW_COLOR #888888
!define LIFELINE_COLOR #000000
!define NOTE_BG #FFFFCC
!define NOTE_BORDER #9966CC

' Styling
skinparam Style strictuml
skinparam backgroundColor white
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 150
skinparam sequenceArrowThickness 1.5
skinparam sequenceLifeLineBackgroundColor #ced4db
skinparam sequenceLifeLineBorderThickness 2
skinparam lifelineStrategy solid

' Styling for each entity
skinparam actor {
  backgroundColor ACTOR_BG
  borderColor #9966CC
  fontColor black
}

skinparam participant {
  backgroundColor PARTICIPANT_BG
  borderColor #9966CC
  fontColor black
}

skinparam sequence {
  ArrowColor ARROW_COLOR
  LifeLineBorderColor LIFELINE_COLOR
  GroupBorderColor #9966CC
  GroupBackgroundColor #F5F5F5
}

skinparam note {
  BackgroundColor NOTE_BG
  BorderColor NOTE_BORDER
}

' Even spacing between the entities
skinparam ParticipantPadding 20
skinparam BoxPadding 10

' Numbering for the sequence diagram
autonumber 1

title Parade Sequence Diagram

actor User
participant "RunGame" as RunGame
participant "LoginUI" as LoginUI
participant "LoginManager" as LoginManager
participant "AccountFileManager" as AccountFileManager
participant "Account" as Account
participant "Game" as Game
participant "GameState" as GameState
participant "TurnManager" as TurnManager
participant "PlayerManager" as PlayerManager
participant "Player" as Player
participant "Deck" as Deck
participant "FlairShopUI" as FlairShopUI
participant "FlairShop" as FlairShop
participant "ScoreCalculator" as ScoreCalculator
participant "CryptoUtils" as CryptoUtils

== Game Startup ==

User -> RunGame: main()
activate RunGame 

RunGame -> RunGame: <<create>>
activate RunGame 
RunGame -> AccountFileManager: <<create>>
RunGame -> FlairShop: <<create>>
RunGame -> FlairShopUI: <<create>>
deactivate RunGame

RunGame -> ConsoleUtils: printParadeAnimation()
RunGame -> ConsoleUtils: printParadeAnimationLoop()
User -> RunGame: Press Enter
RunGame -> LoginUI: showLoginMenu()
activate LoginUI 

LoginUI -> LoginManager: handleLogin()
activate LoginManager 

LoginManager -> AccountFileManager: loadAllAccounts()
activate AccountFileManager 
AccountFileManager -> AccountFileManager: processExistingFile()
AccountFileManager -> CryptoUtils: xorCipher(encryptedData)
AccountFileManager -> AccountFileManager: parseContent()
AccountFileManager --> LoginManager: loaded accounts
deactivate AccountFileManager

alt User selects existing account
    LoginManager --> LoginUI: selected account
else User creates new account
    LoginManager -> LoginManager: handleAccountCreation()
    LoginManager -> Account: <<create>>
    LoginManager -> AccountFileManager: save(newAccount)
    LoginManager --> LoginUI: created account
end
deactivate LoginManager

LoginUI --> RunGame: currentAccount
deactivate LoginUI

RunGame -> AccountFileManager: save(currentAccount)

== Main Menu Selection ==

loop Menu Loop until game starts or exit
    RunGame -> User: Display main menu options
    User -> RunGame: Select option
end loop

note right of RunGame
  Menu options are handled as follows:
  - R: Display rulebook
  - S: Start game (breaks loop)
  - B: Open flair shop
  - Q: Confirm and quit
end note

RunGame -> User: User selects option

alt User selects "R" (Rulebook)
    RunGame -> RulebookManager: displayRulebook()
else User selects "S" (Start Game)
    RunGame -> RunGame: selectGameMode()
else User selects "B" (Flair Shop)
    RunGame -> FlairShopUI: openFlairShopMenu(currentAccount)
    activate FlairShopUI 
    
    FlairShopUI -> FlairShop: getAvailableFlairs()
    
    alt User purchases flair
        FlairShopUI -> FlairShop: purchaseFlair(flairName, account)
        FlairShop -> Account: deductBalance(cost)
        FlairShop -> Account: unlockFlair(flairName)
        FlairShop -> AccountFileManager: save(account)
    else User selects flair to wear
        FlairShopUI -> FlairShop: selectFlairToWear(flairName, account)
        FlairShop -> Account: setWornFlair(flairName)
        FlairShop -> AccountFileManager: save(account)
    end
    
    FlairShopUI --> RunGame: return to main menu
    deactivate FlairShopUI
else User selects "Q" (Quit)
    RunGame -> RunGame: confirmQuit()
    alt User confirms quit
        RunGame -> System: exit(0)
    end
end

== Game Initialization ==

alt User selects Singleplayer
    RunGame -> RunGame: startSinglePlayer()
    RunGame -> PlayerManager: <<create>>
    activate PlayerManager 
    RunGame -> PlayerManager: initializeComputerPlayers(numBots)
    PlayerManager -> PlayerNameManager: assignName()
    PlayerManager -> Deck: initialiseHand()
    PlayerManager --> RunGame: players
    deactivate PlayerManager
    RunGame -> UserInterface: <<create>> SinglePlayerUI
else User selects Multiplayer
    RunGame -> RunGame: startMultiPlayer()
    alt User hosts game
        RunGame -> RunGame: hostMultiPlayer()
        RunGame -> GameServerEndpoint: <<create>>
        RunGame -> PlayerManager: initializeHumanPlayers(sessions, true)
        RunGame -> UserInterface: <<create>> MultiplayerUI(serverEndpoint)
    else User joins game
        RunGame -> RunGame: joinMultiPlayer()
        RunGame -> GameClientEndpoint: <<create>>
    end
end

RunGame -> GameManager: start(ui, serverEndpoint)
activate GameManager 

GameManager -> Game: <<create>>
GameManager -> Game: startGame()
activate Game 

== Game Mode Selection ==

Game -> User: Display game mode options
User -> Game: Select game mode
alt User selects Classic Mode
    Game -> GameMode: <<create>> ClassicMode
    Game -> GameMode: initialize(scanner)
else User selects Timed Mode
    Game -> GameMode: <<create>> TimedMode
    Game -> GameMode: initialize(scanner)
    Game -> TimedMode: initializeTimeBonuses(players)
end

Game -> ConsoleUtils: displayCountdown(ui)
Game -> GameState: <<create>>
Game -> GameState: initializeParade(initialLength)
activate GameState 
GameState -> Deck: drawCard()
GameState --> Game: parade initialized
deactivate GameState

Game -> TurnManager: <<create>>

== Game Loop ==

loop Game turns until game over
    Game -> GameState: getPlayers()
    Game -> GameMode: isTimeUp()
end loop

note right of Game
  For each turn in the game loop:
  1. Check if time is up
  2. Execute player's turn
  3. Update game state
end note

Game -> GameState: Current player's turn
alt Time is not up
    Game -> TurnManager: executeTurn(gameState, currentPlayer, gameMode, action)
    activate TurnManager 
    
    TurnManager -> Player: chooseCardToPlay()
    activate Player 
    
    alt Player is HumanPlayer
        Player -> User: Display hand and prompt for card
        User -> Player: Select card index
        Player -> Player: playCard(index)
    else Player is ComputerPlayer
        alt Player is BeginnerComputerPlayer
            Player -> Player: Random card selection
            Player -> Player: playCard(random index)
        else Player is IntermediateComputerPlayer
            Player -> Player: Sort hand by value
            Player -> Player: playCard(highest value)
        end
    end
    
    Player --> TurnManager: selected card
    deactivate Player
    
    TurnManager -> GameState: getParade()
    TurnManager -> TurnManager: processCardPlacement(card, parade)
    TurnManager -> Deck: drawCard()
    TurnManager -> Player: drawCard(newCard)
    
    TurnManager --> Game: turn completed
    deactivate TurnManager
    
    Game -> GameMode: updateAfterTurn(player, turnDuration)
    
    alt GameMode is TimedMode
        Game -> TimedMode: calculateTimeBonus(turnDuration)
        Game -> TimedMode: getLastTurnBonus()
    end
else Time is up
    Game -> GameState: setGameOver(true)
end

== Game End and Scoring ==

Game -> EndGameHandler: <<create>>
Game -> EndGameHandler: handleFinalRoundAndScoring(gameMode)
activate EndGameHandler 

EndGameHandler -> ScoreCalculator: <<create>>
activate ScoreCalculator 
ScoreCalculator -> ScoreCalculator: calculateMajorities()
ScoreCalculator --> EndGameHandler: scoreMap
deactivate ScoreCalculator

EndGameHandler -> User: Display final scores and winner
EndGameHandler -> Account: incrementWins() or incrementLosses()
EndGameHandler -> Account: addBalance(winnings)
EndGameHandler -> AccountFileManager: save(account)

EndGameHandler --> Game: final results
deactivate EndGameHandler

Game --> GameManager: game completed
deactivate Game

GameManager --> RunGame: return to main menu
deactivate GameManager

RunGame -> System: exit
deactivate RunGame